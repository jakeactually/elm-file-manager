var _user$project$FileManager_Update$update = F2(
	function (msg, model) {
		var _p0 = msg;
		switch (_p0.ctor) {
			case 'EnvMsg':
				return A2(_user$project$FileManager_Env$handleEnvMsg, _p0._0, model);
			case 'Upload':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{showContextMenu: false}),
					_1: _user$project$FileManager_Port$upload(model.dir)
				};
			case 'FilesAmount':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{filesAmount: _p0._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Progress':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{progress: _p0._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Cancel':
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: _user$project$FileManager_Port$cancel(
						{ctor: '_Tuple0'})
				};
			case 'Uploaded':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{filesAmount: model.filesAmount - 1}),
					_1: A2(_user$project$FileManager_Action$getLs, model.fileApi, model.dir)
				};
			case 'OpenNameDialog':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							showNameDialog: true,
							name: function () {
								var _p1 = model.caller;
								if (_p1.ctor === 'Just') {
									return _p1._0.name;
								} else {
									return '';
								}
							}(),
							showContextMenu: false
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'CloseNameDialog':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{showNameDialog: false}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Name':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{name: _p0._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'NewDir':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{showNameDialog: false, load: true}),
					_1: A3(_user$project$FileManager_Action$newDir, model.fileApi, model.dir, model.name)
				};
			case 'Download':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{showContextMenu: false}),
					_1: _user$project$FileManager_Port$download(
						A2(
							_elm_lang$core$List$map,
							function (_p2) {
								return A2(
									F2(
										function (x, y) {
											return A2(_elm_lang$core$Basics_ops['++'], x, y);
										}),
									model.dir,
									function (_) {
										return _.name;
									}(_p2));
							},
							A2(
								_elm_lang$core$List$filter,
								function (_p3) {
									return !function (_) {
										return _.isDir;
									}(_p3);
								},
								model.selected)))
				};
			case 'Rename':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{showNameDialog: false, load: true}),
					_1: function () {
						var _p4 = model.caller;
						if (_p4.ctor === 'Just') {
							return A4(_user$project$FileManager_Action$rename, model.fileApi, model.dir, _p4._0.name, model.name);
						} else {
							return _elm_lang$core$Platform_Cmd$none;
						}
					}()
				};
			case 'Cut':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{clipboardDir: model.dir, clipboardFiles: model.selected, showContextMenu: false}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Paste':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							clipboardFiles: {ctor: '[]'},
							showContextMenu: false,
							load: true
						}),
					_1: function () {
						var _p5 = model.caller;
						if (_p5.ctor === 'Just') {
							var _p6 = _p5._0;
							return _p6.isDir ? A4(
								_user$project$FileManager_Action$move,
								model.fileApi,
								model.clipboardDir,
								model.clipboardFiles,
								A2(
									_elm_lang$core$Basics_ops['++'],
									model.dir,
									A2(_elm_lang$core$Basics_ops['++'], _p6.name, '/'))) : _elm_lang$core$Platform_Cmd$none;
						} else {
							return A4(_user$project$FileManager_Action$move, model.fileApi, model.clipboardDir, model.clipboardFiles, model.dir);
						}
					}()
				};
			case 'Delete':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{showContextMenu: false, load: true}),
					_1: A3(_user$project$FileManager_Action$delete, model.fileApi, model.dir, model.selected)
				};
			default:
				return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
		}
	});
var _user$project$FileManager_Update$init = function (_p7) {
	var _p8 = _p7;
	var _p10 = _p8.fileApi;
	var _p9 = _p8.dir;
	return A2(
		F2(
			function (v0, v1) {
				return {ctor: '_Tuple2', _0: v0, _1: v1};
			}),
		{
			fileApi: _p10,
			thumbService: _p8.thumbService,
			dir: _p9,
			open: false,
			load: false,
			pos1: A2(_user$project$FileManager_Vec$Vec2, 0, 0),
			pos2: A2(_user$project$FileManager_Vec$Vec2, 0, 0),
			mouseDown: false,
			ctrl: false,
			caller: _elm_lang$core$Maybe$Nothing,
			files: {ctor: '[]'},
			showBound: false,
			bound: _user$project$FileManager_Vec$newBound,
			bounds: {ctor: '[]'},
			selected: {ctor: '[]'},
			drag: false,
			showContextMenu: false,
			selectedBin: {ctor: '[]'},
			filesAmount: 0,
			progress: 0,
			showNameDialog: false,
			name: '',
			clipboardDir: '',
			clipboardFiles: {ctor: '[]'}
		},
		A2(_user$project$FileManager_Action$getLs, _p10, _p9));
};
