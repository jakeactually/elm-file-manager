var _user$project$Env$handleEnvMsg = F2(
	function (msg, model) {
		var _p0 = msg;
		switch (_p0.ctor) {
			case 'MouseDown':
				var _p4 = _p0._0;
				var _p3 = _p0._2;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							mouseDown: true,
							ctrl: _p3,
							caller: _p4,
							pos1: _p0._1,
							selected: function () {
								var _p1 = _p4;
								if (_p1.ctor === 'Just') {
									var _p2 = _p1._0;
									return A2(_elm_lang$core$List$member, _p2, model.selected) ? (_p3 ? A2(
										_elm_lang$core$List$filter,
										F2(
											function (x, y) {
												return !_elm_lang$core$Native_Utils.eq(x, y);
											})(_p2),
										model.selected) : model.selected) : (_p3 ? {ctor: '::', _0: _p2, _1: model.selected} : {
										ctor: '::',
										_0: _p2,
										_1: {ctor: '[]'}
									});
								} else {
									return {ctor: '[]'};
								}
							}(),
							showContextMenu: false
						}),
					_1: _user$project$Port$getBounds(
						{ctor: '_Tuple0'})
				};
			case 'BoundsGotten':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{bounds: _p0._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'MouseMove':
				var _p6 = _p0._0;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							pos2: _p6,
							showBound: model.mouseDown && function (_p5) {
								return !_user$project$Util$isJust(_p5);
							}(model.caller),
							bound: A2(_user$project$Vec$toBound, model.pos1, _p6),
							drag: model.mouseDown && (_user$project$Util$isJust(model.caller) && A2(_user$project$Vec$isFar, model.pos1, _p6))
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'MouseUp':
				var _p12 = _p0._0;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							mouseDown: false,
							selected: function () {
								if (model.showBound) {
									return A2(
										_elm_lang$core$List$map,
										_elm_lang$core$Tuple$second,
										A2(
											_elm_lang$core$List$filter,
											function (_p7) {
												return A2(
													_user$project$Vec$touchesBound,
													model.bound,
													_elm_lang$core$Tuple$first(_p7));
											},
											A2(_user$project$Util$zip, model.bounds, model.files)));
								} else {
									var _p8 = _p12;
									if (_p8.ctor === 'Just') {
										return (model.drag || model.ctrl) ? model.selected : {
											ctor: '::',
											_0: _p8._0,
											_1: {ctor: '[]'}
										};
									} else {
										return {ctor: '[]'};
									}
								}
							}(),
							selectedBin: model.selected
						}),
					_1: function () {
						var _p9 = _p12;
						if (_p9.ctor === 'Just') {
							var _p11 = _p9._0;
							return (model.drag && (_p11.isDir && function (_p10) {
								return !A2(_elm_lang$core$List$member, _p11, _p10);
							}(model.selected))) ? A4(
								_user$project$Action$move,
								model.api,
								model.dir,
								model.selected,
								A2(
									_elm_lang$core$Basics_ops['++'],
									'/',
									A2(_elm_lang$core$Basics_ops['++'], _p11.name, '/'))) : _elm_lang$core$Platform_Cmd$none;
						} else {
							return _elm_lang$core$Platform_Cmd$none;
						}
					}()
				};
			case 'ContextMenu':
				var _p15 = _p0._0;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							showContextMenu: function () {
								var _p13 = _p15;
								if (_p13.ctor === 'Just') {
									return !(_elm_lang$core$Native_Utils.eq(model.dir, model.clipboardDir) && A2(_elm_lang$core$List$member, _p13._0, model.clipboardFiles));
								} else {
									return true;
								}
							}(),
							selected: function () {
								var _p14 = _p15;
								if (_p14.ctor === 'Just') {
									return model.selectedBin;
								} else {
									return {ctor: '[]'};
								}
							}()
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'GetLs':
				var _p16 = _p0._0;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							dir: _p16,
							files: {ctor: '[]'}
						}),
					_1: A2(_user$project$Action$getLs, model.api, _p16)
				};
			case 'LsGotten':
				var _p17 = _p0._0;
				if (_p17.ctor === 'Ok') {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								files: _p17._0,
								selected: {ctor: '[]'}
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			default:
				var _p18 = _p0._0;
				if (_p18.ctor === 'Ok') {
					return {
						ctor: '_Tuple2',
						_0: model,
						_1: A2(_user$project$Action$getLs, model.api, model.dir)
					};
				} else {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
		}
	});
